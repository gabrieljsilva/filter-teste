# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: String!
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Photo {
  id: ID!
  category: [Category!]!
}

type Credentials {
  id: String!
  email: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

type User {
  id: String!
  name: String!
  birthDate: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
  photos: [Photo!]!
  tags: [String!]!
  credentials: Credentials!
}

type Query {
  findUsers(filters: UserFilter): [User!]!
}

input UserFilter {
  _AND: [UserFilter!]
  _OR: [UserFilter!]
  _NOT: UserFilter
  id: IdFilter
  name: StringFilter
  photos: ListFilterPhoto
  credentialsId: StringFilter
  tags: ListFilterString
  credentials: CredentialsFilter
  _SORT_BY: [UserSortBy!]
}

input IdFilter {
  is: String
}

input StringFilter {
  is: String
  like: String
  in: [String]
}

input ListFilterPhoto {
  _EVERY: PhotoFilter
  _SOME: PhotoFilter
}

input PhotoFilter {
  _AND: [PhotoFilter!]
  _OR: [PhotoFilter!]
  _NOT: PhotoFilter
  id: IdFilter
  upload: UploadFilter
  categoryId: StringFilter
  userId: StringFilter
  category: ListFilterCategory
}

input UploadFilter {
  _AND: [UploadFilter!]
  _OR: [UploadFilter!]
  _NOT: UploadFilter
  id: StringFilter
  url: StringFilter
}

input ListFilterCategory {
  _EVERY: CategoryFilter
  _SOME: CategoryFilter
}

input CategoryFilter {
  _AND: [CategoryFilter!]
  _OR: [CategoryFilter!]
  _NOT: CategoryFilter
  id: IdFilter
  name: StringFilter
}

input ListFilterString {
  _EVERY: [String!]
  _SOME: [String!]
}

input CredentialsFilter {
  _AND: [CredentialsFilter!]
  _OR: [CredentialsFilter!]
  _NOT: CredentialsFilter
  email: StringFilter
  user: UserFilter
}

input UserSortBy {
  id: SortDirection
  name: SortDirection
  credentialsId: SortDirection
  tags: SortDirection
}

enum SortDirection {
  desc
  asc
}

type Mutation {
  login(loginInput: LoginDto!): String!
  createUser(createUserInput: CreateUserDto!): User!
  deleteUserById(userId: String!): User!
  updateUser(updateUserInput: UpdateUserDto!): User!
}

input LoginDto {
  email: String!
  password: String!
}

input CreateUserDto {
  name: String!
  email: String!
  password: String!
  birthDate: DateTime!
}

input UpdateUserDto {
  id: ID!
  name: String
  birthDate: DateTime
  password: String
}